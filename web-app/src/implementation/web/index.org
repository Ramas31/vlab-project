#+TITLE: Web interface to User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Introduction
This document discribes how to implement a simple web application
using AngularJS MVC framework.
* What we have so far ????
   - Requirements
   - Data Model
   - Object implementation of the data model
   - Persistence via ORM (Database)
   - REST API url interface (a specification of urls for each operation)
   - Web interface to system ???
* What is MVC framework

  + The Model-View-Controller (MVC) is an architectural pattern that
    separates an application into three main logical components
   - The model
   - The view and
   - The controller. 

  + Each of these components are built to handle specific development
    aspects of an application.

  + MVC is one of the most frequently used industry-standard web
    development framework to create scalable and extensible projects.

  + Diagrame
    #+CAPTION:  Git local VCS
    #+LABEL:  Git local VCS
  [[./mvc.jpg]]

** Model
The Model is the part of the application that handles the logic for
the application data.  Often model objects retrieve data (and store
data) from a database.
** View
The View is the parts of the application that handles the display of
the data.  Most often the views are created from the model data.
** Controller
The Controller is the part of the application that handles user interaction.
Typically controllers read data from a view, control user input, and send input data to the model.
** Advantages
- The MVC separation helps you manage complex applications, because
  you can focus on one aspect a time. For example, you can focus on
  the view without depending on the business logic. It also makes it
  easier to test an application.

- The MVC separation also simplifies group development. Different
developers can work on the view, the controller logic, and the
business logic in parallel.

* Why MVC ??
* How to implement ??
** Source Code
*** Initiating Angular application on html page
#+BEGIN_SRC 
<div ng-app="directoryApp">
  <div ng-view>
  </div>
</div>
#+END_SRC
*** Router 
- =app.js=
 - The following =route= is implemented for displaying the list all the users. The controller =users= will fetch the data from the REST API and will render to the template =users.html=
#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no
var app = angular.module('directoryApp',['ngRoute','directoryApp.controllers']);
app.config(function($routeProvider){
  $routeProvider
    .when('/', {
      templateUrl : '/static/partials/users.html',
      controller  : 'users'
    })
#+END_SRC
- The following =route= is implemented for displaying the selected user by passing the id of that user. The controller =view-users= will fetch the data of that user from the REST API and will render to the template =view-users.html=
#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no
    .when('/view-user/:id', {
      templateUrl : '/static/partials/view-user.html',
      controller  : 'view-user'
    })
#+END_SRC
- The following =route= is implemented for adding a user. The controller =add-user= will fetch the data from =add-user.html= and will render to the template REST API
#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no
    .when('/add-user/', {
      templateUrl : '/static/partials/add-user.html',
      controller  : 'add-user'
    })
#+END_SRC
- The following =route= is implemented for updating the details of the selected user where the id is passed. The controller =edit-user= will fetch the data from the =edit-user.html= and will update the deatils of that user
#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no
    .when('/edit-user/:id', {
      templateUrl : '/static/partials/edit-user.html',
      controller  : 'edit-user'
    });

});


#+END_SRC
*** Controller
- =controller.py=
- The following controller is implemented for displaying the list of users. It consists of a GET request from =/users= and the response is saved in $scope.users
#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
var app = angular.module('directoryApp.controllers',[]);
app.controller("users", function($scope,  $http, $routeParams, $route,$window){
    $scope.role_name = $window.role_name;
    $http.get("http://localhost:5000/users").success(function(response){
	$scope.users = response;
    });

    });
#+END_SRC
- The following controller is implemented for displaying the selected user along with the various operations that can be performed on that user by the user of specific role. It consists of a GET request from =/users/id= and the response is saved in $scope.user. Delete user is one of the operations that can be performed on the uder by the admin. If the operation is being performed then a DELETE request from =/users/id=  is invoked.
#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
app.controller("view-user", function($scope,  $http, $routeParams, $route,$window){
    $scope.role_name = $window.role_name;
    $scope.session_email=$window.session_email;
    $http.get("http://localhost:5000/users/"+$routeParams.id).success(function(response){
      console.log(response);
       	$scope.user = response;
    });
    $scope.delete_user=function(){
    $http.delete("http://localhost:5000/users/"+$routeParams.id, {headers:{'session' : $scope.session_email}}).success(function(response){
    	alert("deleted user");
      console.log(response);
      window.history.back();
    });
  
   }; 
});
#+END_SRC
- The following controller is implemented for displaying the page to input the details of the user to be added and then adding the user to the list of users. It consists of a POST request to =/users=. Data obtained from the user is saved variable data and then passed on along with the url.
#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
app.controller("add-user", function($scope,   $http,  $routeParams,  $route,$window){
    $scope.role_name=$window.role_name;
    $scope.session_email=$window.session_email;
    $scope.myText="you haven't clicked submit yet"
    $scope.add_user=function(){
       
       var data={
            name:$scope.name,
            email:$scope.email,
            role_id:$scope.role,
            session: $scope.session_email
            };

            
            $http.post("http://localhost:5000/users",data).success(function(reponse){
            $scope.PostDataResponse = data;
            $scope.myText="You added successfully"
            window.history.back();
            }).error(function(response) {
            $scope.ResponseDetails ="Data:" +data+
            "<hr />status: " + status +
            "<hr />headers: " + header +
            "<hr />config: " + config;
            });


};
});
#+END_SRC
-The following controller is implemented for displaying the page to input the details of the user to be updated and then updating the details of the corresponding user. It consists of a PUT request to =/users= where id and the data is passed. Data obtained from the user is saved variable data and then passed on along with the url.
#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
app.controller("edit-user", function($scope,   $http,  $routeParams,  $route,$window){
    $scope.role_name=$window.role_name;
    $scope.session_email=$window.session_email;
    $scope.myText="you haven't clicked submit yet"
    $scope.edit_user=function(){
       
       var data={
            name:$scope.name,
            email:$scope.email,
            role_id:$scope.role,
            session: $scope.session_email
            };
            
            $http.put("http://localhost:5000/users/"+$routeParams.id,data).success(function(response){
            alert("updated successfully");
            $scope.PostDataResponse = data;
            $scope.myText="Edited details successfully"
            }).error(function(response) {
            alert("Unable to update");
            $scope.ResponseDetails ="Data:" +data+
            "<hr />status: " + status +
            "<hr />headers: " + header +
            "<hr />config: " + config;
            });


};
});
#+END_SRC
*** View
- =users.html=
-The following html content displays the list of users along with a view option to view details of a specific user. If the logged in user is an admin then add user option is available. Details of the logged in user is displayed as well. 
#+BEGIN_SRC javascript :tangle ../../src/static/partials/users.html :eval no
<div class="row">
  <div class="col-md-9"><h2>Users</h2></div>
  <div class="col-md-2" ng-if="role_name == 'admin'">
    <a href="#/add-user" class="btn btn-primary">Add User</a>
  </div>
</div>
<div class="row">
  <div class="col-md-12">
    <div class="table-responsive">
      <table class="table table-stripped">
	<thead>
	  <tr>
	    <th>S.NO</th>
            <th>Name</th>
	    <th>Role</th>
	    <th>Action</th>
	  </tr>
        </thead>
	<tbody>
	  <tr ng-repeat="user in users">
	    <td>{{ $index+1 }}</td>
            <td>{{ user.name }}</td>
	    <td>{{ user.role['name'] }}</td>
            <td><a href="#/view-user/{{user.id}}" class="btn btn-primary">View</a></td>
	  </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

#+END_SRC

